I"%<p>A walktrough the commands I executed to set up my server on <a href="https://www.linode.com/" rel="noopener" target="_blank">Linode</a>.</p>

<p><br />
<br /></p>

<h2 id="os-configuration">OS CONFIGURATION</h2>

<p>update Ubuntu</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt update -y &amp;&amp; sudo apt upgrade -y
</code></pre></div></div>

<p><br /></p>

<p>remove debris</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt autoremove
</code></pre></div></div>

<p><br /></p>

<p>add limited user</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ adduser tommi
</code></pre></div></div>

<p><br /></p>

<p>give that user sudo permissions</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ adduser tommi sudo
</code></pre></div></div>

<p><br /></p>

<p>install zsh</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ apt install zsh
</code></pre></div></div>

<p><br /></p>

<p>set zsh as default shell</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ chsh -s /usr/bin/zsh root
</code></pre></div></div>

<p><br /></p>

<p>zsh syntax highlighting</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt install zsh-syntax-highlighting
</code></pre></div></div>

<p>enable syntax highlighting</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" &gt;&gt; ~/.zshrc
</code></pre></div></div>

<p><br /></p>

<p>installing git</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ apt install git
</code></pre></div></div>

<p><br /></p>

<p>installing oh-my-zsh</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
</code></pre></div></div>

<p><br /></p>

<p>re-enable zsh highlighting</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" &gt;&gt; ~/.zshrc
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="installing-docker">INSTALLING DOCKER</h2>

<p>setting up stuff for Linode</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt install dmsetup &amp;&amp; dmsetup mknodes
</code></pre></div></div>

<p><br /></p>

<p>installing</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh
</code></pre></div></div>

<p><br /></p>

<p>enable Docker to start on boot</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo systemctl enable docker
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="installing-docker-compose">INSTALLING DOCKER COMPOSE</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
</code></pre></div></div>

<p><br /></p>

<p>to enable bash completion, insert in <code class="highlighter-rouge">~/.zshrc</code></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins=(... docker docker-compose
)
</code></pre></div></div>

<p><br /></p>

<h3 id="getting-started---docker-compose"><a href="https://docs.docker.com/compose/gettingstarted/">GETTING STARTED - DOCKER COMPOSE</a></h3>

<p><br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir composetest
$ cd composetest
</code></pre></div></div>

<p><br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim app.py
</code></pre></div></div>

<p><br /></p>

<p>paste this inside:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import time

import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)


def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)


@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)
</code></pre></div></div>

<p><br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vim requirements.txt
</code></pre></div></div>

<p><br /></p>

<p>paste this inside:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flask
redis
</code></pre></div></div>

<p><br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vim Dockerfile
</code></pre></div></div>

<p><br /></p>

<p>paste this inside</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP app.py
ENV FLASK_RUN_HOST 0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .
CMD ["flask", "run"]
</code></pre></div></div>

<p><br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vim docker-compose.yml
</code></pre></div></div>

<p><br /></p>

<p>paste this inside</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5000:5000"</span>
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="installing-linodes-lamp"><a href="https://www.linode.com/docs/applications/containers/how-to-install-docker-and-deploy-a-lamp-stack/">INSTALLING LINODE’S <code class="highlighter-rouge">LAMP</code></a></h2>

<p>Search for linode user images:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo docker search linode
</code></pre></div></div>

<p><br /></p>

<p>Download the linode/lamp image:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo docker pull linode/lamp
</code></pre></div></div>

<p><br /></p>

<p>Run, create, or turn on a new container and forward port 80:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo docker run -p 80:80 -t -i linode/lamp /bin/bash
</code></pre></div></div>

<p><br /></p>

<p>As the container’s root user, start Apache:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ service apache2 start
</code></pre></div></div>

<p><br /></p>

<p>Start MySQL:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ service mysql start
</code></pre></div></div>

<p><br /></p>

<p>Exit the container while leaving it running by pressing <code class="highlighter-rouge">ctrl + p</code> then <code class="highlighter-rouge">ctrl + q</code>.</p>

<p>Enter the IP address in a web browser to test the site.</p>

<blockquote>
  <p>The website’s root directory is <code class="highlighter-rouge">/var/www/example.com/public_html/</code>.</p>
</blockquote>

<p><br />
<br /></p>

<h2 id="optimize-apache-for-linode-1gb">OPTIMIZE APACHE FOR LINODE 1GB</h2>

<p>Make a copy of Apache’s configuration file. You can restore the duplicate (apache2.backup.conf) if anything happens to the configuration file:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo cp /etc/apache2/apache2.conf /etc/apache2/apache2.backup.conf
</code></pre></div></div>

<p><br /></p>

<p>Open Apache’s configuration file for editing:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo vim /etc/apache2/apache2.conf
</code></pre></div></div>

<p><br /></p>

<p>add this at the end of the file</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>KeepAlive Off

   ...

   &lt;IfModule mpm_prefork_module&gt;
       StartServers 4
       MinSpareServers 20
       MaxSpareServers 40
       MaxClients 200
       MaxRequestsPerChild 4500
   &lt;/IfModule&gt;
</code></pre></div></div>

<p><br /></p>

<p>Restart Apache to incorporate the new settings:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl restart apache2
</code></pre></div></div>

<h3 id="configure-name-based-virtual-hosts"><a href="https://www.linode.com/docs/websites/hosting-a-website-ubuntu-18-04/#configure-name-based-virtual-hosts">Configure Name-based Virtual Hosts</a></h3>

:ET